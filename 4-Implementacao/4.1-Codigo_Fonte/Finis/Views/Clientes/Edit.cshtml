@model Finis.Models.Cliente

@{
    ViewBag.Title = "Editar cliente";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container" id="formulario">
        <form class="col s12">
            <div class="row">
                
                @Html.ValidationSummary(true, "", new { @class = "validate" })
                @Html.HiddenFor(model => model.date_insert)
                @Html.HiddenFor(model => model.user_update)
                @Html.HiddenFor(model => model.id)
                @Html.HiddenFor(model => model.enderecoId)
                @Html.HiddenFor(model => model.endereco.cidadeId, new { id = "cidadeId" })

                <div class="row">
                    <div class="input-field col s7">
                        @Html.LabelFor(model => model.nome)
                        @Html.EditorFor(model => model.nome, new { htmlAttributes = new { @class = "validate" } })
                        @Html.ValidationMessageFor(model => model.nome, "", new { @class = "validate" })
                    </div>
                    <div class="input-field col s3">
                        @{ Html.EnableClientValidation(false); }
                        @Html.EditorFor(model => model.dataNascimentoString, new { htmlAttributes = new { @id = "date", @class = "datepicker", @placeholder = "Data de nascimento" } })
                        @{ Html.EnableClientValidation(true); }
                        @Html.ValidationMessageFor(model => model.dataNascimento, "", new { @class = "validate" })
                    </div>
                </div>
                <div class="row">
                    <div class="input-field col s5">
                        @Html.EnumDropDownListFor(model => model.genero, "Selecione o gênero", new { @class = "validate" })
                        @Html.ValidationMessageFor(model => model.genero, "", new { @class = "validate" })
                    </div>
                    <div class="input-field col s5">
                        @Html.LabelFor(model => model.rg)
                        @Html.EditorFor(model => model.rg, new { htmlAttributes = new { @class = "validate" } })
                        @Html.ValidationMessageFor(model => model.rg, "", new { @class = "validate" })
                    </div>
                </div>
                <div class="row">
                    <div class="input-field col s10">
                        @Html.LabelFor(model => model.email)
                        @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "validate" } })
                        @Html.ValidationMessageFor(model => model.email, "", new { @class = "validate" })
                    </div>
                </div>
                <div class="row">
                    <div class="input-field col s5">
                        @Html.LabelFor(model => model.telefone)
                        @{ Html.EnableClientValidation(false); }
                        @Html.EditorFor(model => model.telefone, new { htmlAttributes = new { @id = "telefone", @class = "validate" } })
                        @{ Html.EnableClientValidation(true); }
                        @Html.ValidationMessageFor(model => model.telefone, "", new { @class = "validate" })
                    </div>
                    <div class="input-field col s5">
                        @Html.LabelFor(model => model.celular)
                        @{ Html.EnableClientValidation(false); }
                        @Html.EditorFor(model => model.celular, new { htmlAttributes = new { @id = "celular", @class = "validate" } })
                        @{ Html.EnableClientValidation(true); }
                        @Html.ValidationMessageFor(model => model.celular, "", new { @class = "validate" })
                    </div>
                </div>
                <div class="row">
                    <div class="input-field col s5">
                        @Html.LabelFor(model => model.endereco.logradouro)
                        @Html.EditorFor(model => model.endereco.logradouro, new { htmlAttributes = new { @class = "validate" } })
                        @Html.ValidationMessageFor(model => model.endereco.logradouro, "", new { @class = "validate" })
                    </div>
                    <div class="input-field col s2">
                        @Html.LabelFor(model => model.endereco.numero)
                        @Html.EditorFor(model => model.endereco.numero, new { htmlAttributes = new { @class = "validate" } })
                        @Html.ValidationMessageFor(model => model.endereco.numero, "", new { @class = "validate" })
                    </div>
                    <div class="input-field col s3">
                        @Html.LabelFor(model => model.endereco.complemento)
                        @Html.EditorFor(model => model.endereco.complemento, new { htmlAttributes = new { @class = "validate" } })
                        @Html.ValidationMessageFor(model => model.endereco.complemento, "", new { @class = "validate" })
                    </div>
                </div>
                <div class="row">
                    <div class="input-field col s3">
                        @Html.LabelFor(model => model.endereco.bairro)
                        @Html.EditorFor(model => model.endereco.bairro, new { htmlAttributes = new { @class = "validate" } })
                        @Html.ValidationMessageFor(model => model.endereco.bairro, "", new { @class = "validate" })
                    </div>
                    <div class="input-field col s3">
                        @Html.LabelFor(model => model.endereco.cep)
                        @Html.EditorFor(model => model.endereco.cep, new { htmlAttributes = new { @class = "validate" } })
                        @Html.ValidationMessageFor(model => model.endereco.cep, "", new { @class = "validate" })
                    </div>
                    @*<div class="input-field col s4">
                        @Html.DropDownListFor(model => model.endereco.cidadeId, (SelectList)ViewBag.Cidades, "Selecione a cidade", htmlAttributes: new { @class = "validate" })
                        @Html.ValidationMessageFor(model => model.endereco.cidadeId, "", new { @class = "validate" })
                    </div>*@
                    <div class="input-field col s4">
                        @Html.EditorFor(model => model.endereco.cidadeNome, new { htmlAttributes = new { @type = "text", @id = "cidadeNome", @class = "autocomplete" } })
                        @Html.LabelFor(model => model.endereco.cidadeNome)
                        @Html.ValidationMessageFor(model => model.endereco.cidadeNome, "", new { @class = "validate" })
                    </div>
                </div>
                <div class="row">
                    <div class="input-field col s4">
                        @Html.LabelFor(model => model.saldoCreditoParcial)
                        @{ Html.EnableClientValidation(false); }
                        @Html.EditorFor(model => model.saldoCreditoParcial, new { htmlAttributes = new { @id = "creditoParcial", @class = "validate" } })
                        @{ Html.EnableClientValidation(true); }
                        @Html.ValidationMessageFor(model => model.saldoCreditoParcial, "", new { @class = "validate" })
                    </div>
                    <div class="input-field col s4">
                        @Html.LabelFor(model => model.saldoCreditoEspecial)
                        @{ Html.EnableClientValidation(false); }
                        @Html.EditorFor(model => model.saldoCreditoEspecial, new { htmlAttributes = new { @id = "creditoEspecial", @class = "validate" } })
                        @{ Html.EnableClientValidation(true); }
                        @Html.ValidationMessageFor(model => model.saldoCreditoEspecial, "", new { @class = "validate" })
                    </div>
                    <div class="input-field col s4 switch">
                        @*@Html.LabelFor(m => m.ativo, new { @class = "login-label" })*@
                        <label>
                            Inativo
                            @Html.CheckBoxFor(m => m.ativo, new { @type = "checkbox" })
                            <span class="lever"></span>
                            Ativo
                        </label>
                    </div>
                </div>
                <div class="row">
                    <button class="btn waves-effect waves-light" onClick="location.href='@Url.Action("Index","Clientes")'" type="button" name="action">
                        <i class="fa fa-arrow-left" aria-hidden="true"></i>
                        Voltar
                    </button>
                    <button class="btn waves-effect waves-light" type="submit" name="action">
                        Salvar
                        <i class="fa fa-plus" aria-hidden="true"></i>
                    </button>
                </div>
            </div>
        </form>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/materialize")
    <script type="text/javascript">

        var dados = {};

        function RecuperaID(string) {
            var id = string.substr(0, string.indexOf(' '));

            if (!isNaN(id)) {
                return parseInt(id);
            }
            else {
                alert("Por favor selecione uma opção");
            }
        }

        $(document).ready(function () {
            $('select').material_select();

            $("#telefone").mask("(99)9999-9999");
            $("#celular").mask("(99)99999-9999");

            $("input[type='hidden']").each(function (index, element) {
                $(this).appendTo($(element).parent());
            });
        });

        $('.datepicker').pickadate({
            selectMonths: true,//Creates a dropdown to control month
            selectYears: 100,//Creates a dropdown of 15 years to control year
            //The title label to use for the month nav buttons
            labelMonthNext: 'Proximo Mês',
            labelMonthPrev: 'Mês Anterior',
            //The title label to use for the dropdown selectors
            labelMonthSelect: 'Selecionar Mês',
            labelYearSelect: 'Selecionar Ano',
            //Months and weekdays
            monthsFull: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
            monthsShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Maio', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            weekdaysFull: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
            weekdaysShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'],
            //Materialize modified
            weekdaysLetter: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],
            //Today and clear
            today: 'Hoje',
            clear: 'Limpar',
            close: 'Fechar',
            //The format to show on the `input` element
            format: 'dd/mm/yyyy'
        });

        var erro = "@ViewBag.Erro";

             if (erro != "" && erro != null && erro != undefined)
             {
                 alert("Erro: " + erro);
             }

            $.ajax({
                type: 'GET',
                url: '@Url.Action("DropboxCidades", "Clientes")',
                success: function (response) {
                    var resultado = JSON.parse(response);

                    for (i = 0; i < resultado.lista.length; i++)
                    {
                        dados[resultado.lista[i].id + " - " + resultado.lista[i].nome + "/" + resultado.lista[i].sigla] = null;
                    }

                    $('input.autocomplete').autocomplete({
                        data: dados,
                        limit: 5,
                        onAutocomplete: function (val) {

                            $('#cidadeId').val(RecuperaID(val));
                        },
                    });
                }
            });

    </script>
}