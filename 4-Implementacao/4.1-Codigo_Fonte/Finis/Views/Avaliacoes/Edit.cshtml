@model Finis.Models.Avaliacao

@{
    ViewBag.Title = "Editar Avaliação";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container" id="formulario">

        @Html.ValidationSummary(true, "", new { @class = "validate" })
        @Html.HiddenFor(model => model.date_insert)
        @Html.HiddenFor(model => model.user_update)
        @Html.HiddenFor(model => model.id)
        @Html.HiddenFor(a => a.clienteId, new { id = "clienteId" })

        <form class="col s12">
            @*<div class="row">
                <div class="input-field col s12">
                    @Html.DropDownListFor(model => model.clienteId, (SelectList)ViewBag.Clientes, "Cliente", htmlAttributes: new { @class = "validate" })
                    @Html.ValidationMessageFor(model => model.clienteId, "", new { @class = "text-danger" })
                </div>
            </div>*@
            <div class="row">
                <div class="input-field col s12">
                    @Html.EditorFor(model => model.clienteNome, new { htmlAttributes = new { @type = "text", @id = "clienteNome", @class = "autocomplete" } })
                    @Html.LabelFor(model => model.clienteNome)
                    @Html.ValidationMessageFor(model => model.clienteNome, "", new { @class = "validate" })
                </div>
            </div>
            <div class="row">
                <div class="input-field col s4">
                    @{ Html.EnableClientValidation(false); }
                    @Html.EditorFor(model => model.dataEntradaString, new { htmlAttributes = new { @id = "date", @class = "datepicker", @placeholder = "Data de entrada" } })
                    @{ Html.EnableClientValidation(true); }
                    @Html.ValidationMessageFor(model => model.dataEntrada, "", new { @class = "validate" })
                </div>
                <div class="input-field col s3">
                    @Html.LabelFor(model => model.quantidadeExemplares, htmlAttributes: new { @class = "validate" })
                    @Html.EditorFor(model => model.quantidadeExemplares, new { htmlAttributes = new { @class = "validate" } })
                    @Html.ValidationMessageFor(model => model.quantidadeExemplares, "", new { @class = "validate" })
                </div>
                <div class="input-field col s5">
                    @Html.EnumDropDownListFor(model => model.situacao, "Situação", htmlAttributes: new { @class = "validate", @id = "situacaoAvaliacao", @name = "situacaoAvaliacao" })
                    @Html.ValidationMessageFor(model => model.situacao, "", new { @class = "validate" })
                </div>
            </div>
            <div class="row">
                <div class="input-field col s5">
                    @Html.LabelFor(model => model.creditoEspecial, htmlAttributes: new { @id = "lblCreditoEspecial", @class = "validate" })
                    @{ Html.EnableClientValidation(false); }
                    @Html.EditorFor(model => model.creditoEspecial, new { htmlAttributes = new { @id = "creditoEspecial", @class = "validate" } })
                    @Html.ValidationMessageFor(model => model.creditoEspecial, "", new { @class = "validate" })
                    @{ Html.EnableClientValidation(true); }
                </div>
                <div class="input-field col s5">
                    @Html.LabelFor(model => model.creditoParcial, htmlAttributes: new { @id = "lblCreditoParcial", @class = "validate" })
                    @{ Html.EnableClientValidation(false); }
                    @Html.EditorFor(model => model.creditoParcial, new { htmlAttributes = new { @id = "creditoParcial", @class = "validate" } })
                    @Html.ValidationMessageFor(model => model.creditoParcial, "", new { @class = "validate" })
                    @{ Html.EnableClientValidation(true); }
                </div>
            </div>
            <div class="row">
                <button class="btn waves-effect waves-light" onClick="location.href='@Url.Action("Index","Avaliacoes")'" type="button" name="action">
                    <i class="fa fa-arrow-left" aria-hidden="true"></i>
                    Voltar
                </button>
                <button class="btn waves-effect waves-light" type="submit" name="action">
                    Salvar
                    <i class="fa fa-plus" aria-hidden="true"></i>
                </button>
            </div>
        </form>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/materialize")
    <script type="text/javascript">

        var dados = {};

        function RecuperaID(string) {
            var id = string.substr(0, string.indexOf(' '));

            if (!isNaN(id)) {
                return parseInt(id);
            }
            else {
                alert("Por favor selecione uma opção");
            }
        }

        $(document).ready(function () {
            $('select').material_select();

            var erro = "@ViewBag.Erro";

             if (erro != "" && erro != null && erro != undefined)
             {
                 alert("Erro: " + erro);
             }

            $.ajax({
                type: 'GET',
                url: '@Url.Action("DropboxClientes", "Avaliacoes")',
                success: function (response) {
                    var resultado = JSON.parse(response);

                    for (i = 0; i < resultado.lista.length; i++)
                    {
                        dados[resultado.lista[i].id + " - " + resultado.lista[i].nome + " - " + resultado.lista[i].rg] = null;
                    }

                    $('input.autocomplete').autocomplete({
                        data: dados,
                        limit: 5,
                        onAutocomplete: function (val) {

                            $('#clienteId').val(RecuperaID(val));
                        },
                    });
                }
            });

        });

        $('.datepicker').pickadate({
            selectMonths: true,//Creates a dropdown to control month
            selectYears: 100,//Creates a dropdown of 15 years to control year
            //The title label to use for the month nav buttons
            labelMonthNext: 'Proximo Mês',
            labelMonthPrev: 'Mês Anterior',
            //The title label to use for the dropdown selectors
            labelMonthSelect: 'Selecionar Mês',
            labelYearSelect: 'Selecionar Ano',
            //Months and weekdays
            monthsFull: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
            monthsShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Maio', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            weekdaysFull: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
            weekdaysShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'],
            //Materialize modified
            weekdaysLetter: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],
            //Today and clear
            today: 'Hoje',
            clear: 'Limpar',
            close: 'Fechar',
            //The format to show on the `input` element
            format: 'dd/mm/yyyy'
        });

        window.onload = function () {
            document.getElementById("situacaoAvaliacao").onchange = function () {

                var valorSituacao = document.getElementById('situacaoAvaliacao').value;

                if (valorSituacao == 2) {
                    document.getElementById('creditoEspecial').readOnly = false;
                    document.getElementById('creditoParcial').readOnly = false;

                    document.getElementById('creditoEspecial').style.visibility = "visible";
                    document.getElementById('creditoParcial').style.visibility = "visible";

                    document.getElementById('lblCreditoEspecial').style.visibility = "visible";
                    document.getElementById('lblCreditoParcial').style.visibility = "visible";
                }
                else if (valorSituacao == 3 || valorSituacao == 4) {
                    document.getElementById('creditoEspecial').readOnly = true;
                    document.getElementById('creditoParcial').readOnly = true;

                    document.getElementById('creditoEspecial').style.visibility = "visible";
                    document.getElementById('creditoParcial').style.visibility = "visible";

                    document.getElementById('lblCreditoEspecial').style.visibility = "visible";
                    document.getElementById('lblCreditoParcial').style.visibility = "visible";
                }
                else if (valorSituacao == 1) {
                    document.getElementById('creditoEspecial').style.visibility = "hidden";
                    document.getElementById('creditoParcial').style.visibility = "hidden";

                    document.getElementById('lblCreditoEspecial').style.visibility = "hidden";
                    document.getElementById('lblCreditoParcial').style.visibility = "hidden";
                }
                else {
                    document.getElementById('creditoEspecial').style.visibility = "visible";
                    document.getElementById('creditoParcial').style.visibility = "visible";

                    document.getElementById('lblCreditoEspecial').style.visibility = "visible";
                    document.getElementById('lblCreditoParcial').style.visibility = "visible";

                    document.getElementById('creditoEspecial').readOnly = false;
                    document.getElementById('creditoParcial').readOnly = false;
                }
            }
        }

    </script>
}