@model Finis.Models.Venda

@using Finis.Models

@{
    ViewBag.Title = "Novo Registro de Venda";
}

<script type="text/javascript">

    function SelectedIndexChanged() {

        var idCliente = $('#idCliente').val();

        $.ajax({
            type: 'GET',
            url: '@Url.Action("RecuperaCreditosCliente", "Vendas")',
                data: { id: idCliente },
                dataType: 'json',
                success: function (data) {

                    $('#credEsp').val(data.creditoEspecial);
                    $('#credParc').val(data.creditoParcial);
                    DesabilitaCreditos();
                    Materialize.updateTextFields();
                }
            });
    }

    function AdicionaLista(idItem) {

         $.ajax({
                type: 'GET',
                url: '@Url.Action("QuantidadeMaiorQueEstoque", "Vendas")',
                data: { id: idItem },
                dataType: 'json',
                success: function (data) {

                    obj = data;
                    if (obj.Resultado) {
                        alert("Quantidade maior que o estoque atual!");
                        return;
                    } else {

                        $.ajax({
                type: 'GET',
                url: '@Url.Action("AdicionarItem", "Vendas")',
                data: { id: idItem },
                dataType: 'html',
                success: function (data) {

                    $('#divItens').html(data);
                    AtualizaValores();
                }
            });

                    }
                }
        });
    }

    function EstoqueVazio(idItem) {

        $.ajax({
                type: 'GET',
                url: '@Url.Action("QuantidadeMaiorQueEstoque", "Vendas")',
                data: { id: idItem },
                dataType: 'json',
                success: function (data) {

                    obj = data;
                    if (obj.Resultado) {
                        return true;
                    }
                }
        });
        return false
    }

    function RemoverLista(indice) {

        $.ajax({
                type: 'GET',
                url: '@Url.Action("RemoverItem", "Vendas")',
                data: { indice: indice },
                dataType: 'html',
                success: function (data) {

                    $('#divItens').html(data);
                    AtualizaValores();
                }
            });
    }

    function EditarLista(indice) {

        var qtdadeEntrada = prompt("Quantidade do item:", "1");
        if (isNaN(qtdadeEntrada))
        {
            alert("Quantidade inválida!");
            return;
        }
        else
        {
            qtdadeEntrada = parseInt(qtdadeEntrada);

            $.ajax({
                 type: "GET",
                 url: "@Url.Action("VerificaQuantidadeItem", "Vendas")",
                 data: { indice: indice, quantidade: qtdadeEntrada },
                 dataType: "json",
                 success: function (dados) {
                     obj = dados;
                     console.log(obj.Resultado);
                     if (obj.Resultado) {
                         alert("Quantidade maior que o estoque atual!");
                         return;
                     } else {

                         $.ajax({
                type: 'GET',
                url: '@Url.Action("EditarItem", "Vendas")',
                data: { indice: indice, quantidade: qtdadeEntrada },
                dataType: 'html',
                success: function (data) {

                    $('#divItens').html(data);
                    AtualizaValores();
                }
            });

                     }
                 }
        });


        }
    }

    function carregaDetalhes(id) {

             $.ajax({
                 type: "GET",
                 url: "@Url.Action("Detalhes", "Vendas")",
                 data: { id: id },
                 dataType: "json",
                 success: function (dados) {
                     obj = JSON.parse(dados.Resultado);
                     preencheModalDetalhes(obj);
                 }
        });
    }

    function preencheModalDetalhes(obj) {

        document.getElementById('nome').innerHTML = obj.nome;
        document.getElementById('precoCompra').innerHTML = SubstituirCampoNulo(obj.precoCompra);
        document.getElementById('precoVenda').innerHTML = SubstituirCampoNulo(obj.precoVenda);
        document.getElementById('quantidadeEstoque').innerHTML = SubstituirCampoNulo(obj.quantidadeEstoque);
        document.getElementById('estoqueMinimo').innerHTML = SubstituirCampoNulo(obj.estoqueMinimo);
        document.getElementById('descricao').innerHTML = SubstituirCampoNulo(obj.descricao);
    }

    function SubstituirCampoNulo(campo) {

        if (campo == null || campo == "")
            return " - "
        else
            return campo;
    }

    function DesabilitaCreditos() {

        var idCliente = $('#idCliente').val();

        if (idCliente == "" || idCliente == null) {

            $("#creditoParcial").prop("readonly", true);
            $("#creditoEspecial").prop("readonly", true);

        } else {

            $("#creditoParcial").prop("readonly", false);
            $("#creditoEspecial").prop("readonly", false);

        }
    }

    function AtualizaValores() {

        var desconto = $('#desconto').val();
        var descontoPorcentagem = $('#descontoPorcentagem').val();
        var subtotal = $('#subtotal').val();
        var creditoParcial = $('#creditoParcial').val();
        var creditoEspecial = $('#creditoEspecial').val();
        var total = $('#total').val();
        var recebido = $('#recebido').val();
        var troco = $('#troco').val();

        desconto = desconto.toString().replace(",", ".");
        descontoPorcentagem = descontoPorcentagem.toString().replace(",", ".");
        subtotal = subtotal.toString().replace(",", ".");
        creditoParcial = creditoParcial.toString().replace(",", ".");
        creditoEspecial = creditoEspecial.toString().replace(",", ".");
        total = total.toString().replace(",", ".");
        recebido = recebido.toString().replace(",", ".");
        troco = troco.toString().replace(",", ".");
        
        if (isNaN(desconto) || isNaN(descontoPorcentagem) || isNaN(creditoParcial) ||
            isNaN(creditoEspecial)|| isNaN(recebido) || 
            (desconto == "") || (desconto == null) || (descontoPorcentagem == "") || (descontoPorcentagem == null) ||
            (creditoParcial == "") || (creditoParcial == null) ||
            (creditoEspecial == "") || (creditoEspecial == null) || 
            (recebido == "") || (recebido == null) ) {

            alert("Valor inválido!");
            return;
        }
        else {

            $.ajax({
                 type: "GET",
                 url: "@Url.Action("CalculaValores", "Vendas")",
                 data: {
                     desconto: desconto,
                     descontoPorcentagem: descontoPorcentagem,
                     subtotal: subtotal,
                     creditoParcial: creditoParcial,
                     creditoEspecial: creditoEspecial,
                     total: total,
                     recebido: recebido,
                     troco: troco
                 },
                 dataType: "json",
                 success: function (dados) {
                     if (dados.Resultado) {
                         PreencheValores(dados);
                     } else {
                         alert("O valor final não pode ser negativo!");
                         ZeraValores();
                     }
                     
                 }
            });
        }
    }

    function ZeraValores() {

        $('#desconto').val("0");
        $('#descontoPorcentagem').val("0");
        $('#creditoParcial').val("0");
        $('#creditoEspecial').val("0");
    }

    function PreencheValores(obj) {

        $('#desconto').val((obj.Desconto).toString().replace(".", ","));
        $('#descontoPorcentagem').val((obj.DescontoPorcentagem).toString().replace(".", ","));
        $('#subtotal').val((obj.Subtotal).toString().replace(".", ","));
        $('#creditoParcial').val((obj.CreditoParcial).toString().replace(".", ","));
        $('#creditoEspecial').val((obj.CreditoEspecial).toString().replace(".", ","));
        $('#total').val((obj.Total).toString().replace(".", ","));
        $('#recebido').val((obj.Recebido).toString().replace(".", ","));
        $('#troco').val((obj.Troco).toString().replace(".", ","));
    }

</script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container" id="formulario">

        @Html.ValidationSummary(true, "", new { @class = "validate" })
        @Html.Hidden("itemId", new { id = "itemId" })

        <form class="col s12">
            <div class="row">
                <div class="input-field col s8">
                    @Html.DropDownListFor(model => model.clienteId, (SelectList)ViewBag.Clientes, "Cliente", htmlAttributes: new { onchange = "SelectedIndexChanged()", @id = "idCliente", @class = "validate" })
                    @Html.ValidationMessageFor(model => model.clienteId, "", new { @class = "text-danger" })
                </div>
                <div class="input-field col s2">
                    <label class="active" for="credEsp">Crédito especial</label>
                    <input type="text" name="credEsp" id="credEsp" readonly>
                </div>
                <div class="input-field col s2">
                    <label class="active" for="credParc">Crédito parcial</label>
                    <input type="text" name="credParc" id="credParc" readonly>
                </div>
            </div>
            <div class="row">
                <div class="input-field col s12">
                    @Html.Editor("item", new { htmlAttributes = new { @type = "text", @id = "item", @class = "autocomplete" } })
                    @Html.Label("Item")
                </div>
            </div>
            <div class="row">
                <div id="divItens" class="input-field col s12">
                    @{
                        Html.RenderPartial("~/Views/Vendas/ListarItens.cshtml", Model.itensVenda);
                    }
                </div>
            </div>
            <br /><br /><br />
            <div class="row">
                <div class="input-field col s3">
                    @{ Html.EnableClientValidation(false); }
                    @Html.EditorFor(model => model.dataCompra, new { htmlAttributes = new { onchange = "AtualizaValores()", @id = "date", @class = "datepicker", @placeholder = "Data da venda" } })
                    @{ Html.EnableClientValidation(true); }
                    @Html.ValidationMessageFor(model => model.dataCompra, "", new { @class = "validate" })
                </div>
                <div class="input-field col s5">
                    @Html.EnumDropDownListFor(model => model.formaPagamento, "Forma de pagamento", htmlAttributes: new { @class = "validate", @id = "formaPagamento", @name = "formaPagamento" })
                    @Html.ValidationMessageFor(model => model.formaPagamento, "", new { @class = "validate" })
                </div>
                <div class="input-field col s2">
                    @Html.LabelFor(model => model.desconto, htmlAttributes: new { @class = "validate" })
                    @{ Html.EnableClientValidation(false); }
                    @Html.TextBoxFor(model => model.desconto, new { onchange = "AtualizaValores()", @id = "desconto", @class = "validate" } )
                    @Html.ValidationMessageFor(model => model.desconto, "", new { @class = "validate" })
                    @{ Html.EnableClientValidation(true); }
                </div>
                <div class="input-field col s2">
                    @Html.LabelFor(model => model.descontoPorcentagem, htmlAttributes: new { @class = "validate" })
                    @{ Html.EnableClientValidation(false); }
                    @Html.TextBoxFor(model => model.descontoPorcentagem, new { onchange = "AtualizaValores()", @id = "descontoPorcentagem", @class = "validate" } )
                    @Html.ValidationMessageFor(model => model.descontoPorcentagem, "", new { @class = "validate" })
                    @{ Html.EnableClientValidation(true); }
                </div>
            </div>
            <div class="row">
                <div class="input-field col s3">
                    @Html.LabelFor(model => model.subtotal, htmlAttributes: new { @class = "validate" })
                    @{ Html.EnableClientValidation(false); }
                    @Html.TextBoxFor(model => model.subtotal,new { onchange = "AtualizaValores()", @id = "subtotal", @class = "validate", @readonly = "readonly", Style = "color:#000000;" } )
                    @{ Html.EnableClientValidation(true); }
                </div>
                <div class="input-field col s3">
                    @Html.LabelFor(model => model.creditoParcial, htmlAttributes: new { @class = "validate" })
                    @{ Html.EnableClientValidation(false); }
                    @Html.TextBoxFor(model => model.creditoParcial, new { onchange = "AtualizaValores()", @id = "creditoParcial", @class = "validate" } )
                    @Html.ValidationMessageFor(model => model.creditoParcial, "", new { @class = "validate" })
                    @{ Html.EnableClientValidation(true); }
                </div>
                <div class="input-field col s3">
                    @Html.LabelFor(model => model.creditoEspecial, htmlAttributes: new { @class = "validate" })
                    @{ Html.EnableClientValidation(false); }
                    @Html.TextBoxFor(model => model.creditoEspecial, new { onchange = "AtualizaValores()", @id = "creditoEspecial", @class = "validate" } )
                    @Html.ValidationMessageFor(model => model.creditoEspecial, "", new { @class = "validate" })
                    @{ Html.EnableClientValidation(true); }
                </div>
                <div class="input-field col s3">
                    @Html.LabelFor(model => model.total, htmlAttributes: new { @class = "validate" })
                    @{ Html.EnableClientValidation(false); }
                    @Html.TextBoxFor(model => model.total, new { onchange = "AtualizaValores()", @id = "total", @class = "validate", @readonly = "readonly", Style = "color:#000000;" } )
                    @{ Html.EnableClientValidation(true); }
                </div>
            </div>
            <div class="row">
                <div class="input-field col s3"></div>
                <div class="input-field col s3"></div>
                <div class="input-field col s3"></div>
                <div class="input-field col s3">
                    @Html.LabelFor(model => model.recebido, htmlAttributes: new { @class = "validate" })
                    @{ Html.EnableClientValidation(false); }
                    @Html.TextBoxFor(model => model.recebido,  new { onchange = "AtualizaValores()", @id = "recebido", @class = "validate" } )
                    @Html.ValidationMessageFor(model => model.recebido, "", new { @class = "validate" })
                    @{ Html.EnableClientValidation(true); }
                </div>
            </div>
            <div class="row">
                <div class="input-field col s3"></div>
                <div class="input-field col s3"></div>
                <div class="input-field col s3"></div>
                <div class="input-field col s3">
                    @Html.LabelFor(model => model.troco, htmlAttributes: new {@class = "validate" })
                    @{ Html.EnableClientValidation(false); }
                    @Html.TextBoxFor(model => model.troco,  new { onchange = "AtualizaValores()", @id = "troco", @class = "validate", @readonly = "readonly", Style = "color:#000000;" } )
                    @{ Html.EnableClientValidation(true); }
                    
                </div>
            </div>
            <div class="row">
                <button class="btn waves-effect waves-light" onClick="location.href='@Url.Action("Index","Vendas")'" type="button" name="action">
                    <i class="fa fa-arrow-left" aria-hidden="true"></i>
                    Voltar
                </button>
                <button class="btn waves-effect waves-light" type="submit" name="action">
                    Encerrar
                    <i class="fa fa-floppy-o" aria-hidden="true"></i>
                </button>
            </div>
        </form>
    </div>
}

<!-- Estrutura do Modal de detalhes -->
<div id="modal1" class="modal">
    <div class="modal-content">
        <h5>Informações do registro</h5>

        <div class="row" id="linha-detalhes">
            <div class="col s6">
                <label>Nome:</label>
            </div>
            <div class="col s3">
                <label>Preço de venda:</label>
            </div>
            <div class="col s3">
                <label>Preço de Compra:</label>
            </div>
        </div>
        <div class="row" id="linha-detalhes">
            <div class="col s6">
                <label class="texto-detalhes" id="nome">.</label>
            </div>
            <div class="col s3">
                <label class="texto-detalhes" id="precoVenda">.</label>
            </div>
            <div class="col s3">
                <label class="texto-detalhes" id="precoCompra">.</label>
            </div>
        </div>

        <div class="row" id="linha-detalhes">
            <div class="col s3">
                <label>Quantidade em estoque:</label>
            </div>
            <div class="col s3">
                <label>Estoque mínimo:</label>
            </div>
        </div>
        <div class="row" id="linha-detalhes">
            <div class="col s3">
                <label class="texto-detalhes" id="quantidadeEstoque">.</label>
            </div>
            <div class="col s3">
                <label class="texto-detalhes" id="estoqueMinimo">.</label>
            </div>
        </div>

        <div class="row" id="linha-detalhes">
            <div class="col s12">
                <label>Descrição:</label>
            </div>
        </div>
        <div class="row" id="linha-detalhes">
            <div class="col s12">
                <label class="texto-detalhes" id="descricao">.</label>
            </div>
        </div>

    </div>
    <div class="modal-footer">
        <hr />
        <a href="#!" class=" modal-action modal-close waves-effect waves-green btn-flat">Fechar</a>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/materialize")
    <script type="text/javascript">

        var dados = {};

        function RecuperaID(string) {
            var id = string.substr(0, string.indexOf(' '));

            if (!isNaN(id)) {
                return parseInt(id);
            }
            else {
                alert("Por favor selecione uma opção");
            }
        }

        $(document).ready(function () {
            $('select').material_select();

            var erro = "@ViewBag.Erro";

             if (erro != "" && erro != null && erro != undefined)
             {
                 alert("Erro: " + erro);
            }

            $.ajax({
                type: 'GET',
                url: '@Url.Action("DropboxItens", "Vendas")',
                success: function (response) {
                    var resultado = JSON.parse(response);

                    for (i = 0; i < resultado.lista.length; i++)
                    {
                        dados[resultado.lista[i].id + " - " + resultado.lista[i].nome] = null;
                    }

                    $('input.autocomplete').autocomplete({
                        data: dados,
                        limit: 5,
                        onAutocomplete: function (val) {

                            $('#itemId').val(RecuperaID(val));
                            AdicionaLista($('#itemId').val());
                            $('#item').val("");
                        },
                    });
                }
            });

        });

        $('.datepicker').pickadate({
            selectMonths: true,//Creates a dropdown to control month
            selectYears: 100,//Creates a dropdown of 15 years to control year
            //The title label to use for the month nav buttons
            labelMonthNext: 'Proximo Mês',
            labelMonthPrev: 'Mês Anterior',
            //The title label to use for the dropdown selectors
            labelMonthSelect: 'Selecionar Mês',
            labelYearSelect: 'Selecionar Ano',
            //Months and weekdays
            monthsFull: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
            monthsShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Maio', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            weekdaysFull: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
            weekdaysShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'],
            //Materialize modified
            weekdaysLetter: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],
            //Today and clear
            today: 'Hoje',
            clear: 'Limpar',
            close: 'Fechar',
            //The format to show on the `input` element
            format: 'dd/mm/yyyy'
        });

        window.onload = function () {

            DesabilitaCreditos();
        }

    </script>
}